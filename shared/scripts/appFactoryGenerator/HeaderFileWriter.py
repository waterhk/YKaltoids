import datetime

class HeaderFileWriter:

	def __init__(self, verbose):
		self.verbose = verbose


	def write(self, app):

		now = datetime.datetime.now()

		with open(app.className + ".h", "w") as file:

			# header
			file.write("//\n// " + app.className  + ".h\n//\n")
			file.write("// DO NOT EDIT!\n")
			file.write("// THIS FILE WAS GENERATED BY appFactoryFactory AT " + str(now) + "\n")
			file.write("//\n\n")
			file.write("#import <Foundation/Foundation.h>\n")
			file.write("#import \"InjectableAppDelegate.h\"\n")
			file.write("#import \"" + app.protocolName + ".h\"\n")


			# open interface definition
			file.write("\n\n")
			file.write("@interface " + app.className  + " : NSObject")

			# protocols
			file.write("<")
			file.write(app.protocolName)
			for component in app.components:
				if not component.isInstanceFactoryProduct:
					continue
				file.write(", " + component.capitalizedName + "InstanceFactory")
			file.write(">\n")

			# empty interface struct
			file.write("{\n}\n\n")

			# (our only method is now defined by the protocol)

			# close interface
			file.write("\n@end\n")
